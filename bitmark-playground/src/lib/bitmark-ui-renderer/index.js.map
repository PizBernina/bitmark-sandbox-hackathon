{"version":3,"sources":["../src/index.ts","../src/components/BitmarkRenderer.tsx","../src/components/AppCodeEditorInteractiveRenderer.tsx","../src/components/ClozeRenderer.tsx","../src/components/ClozeAndMultipleChoiceRenderer.tsx","../src/components/MultipleChoiceRenderer.tsx","../src/components/TextRenderer.tsx","../src/utils/ContentParser.ts","../src/components/ErrorRenderer.tsx","../src/components/SandboxOutputGroupRenderer.tsx","../src/components/AppCodeEditorRenderer.tsx","../src/components/SandboxPlaceholderRenderer.tsx","../src/components/ThemeProvider.tsx"],"sourcesContent":["// Main exports for bitmark-ui-renderer\nexport { default as BitmarkRenderer } from './components/BitmarkRenderer';\nexport { ThemeProvider } from './components/ThemeProvider';\n\n// Individual component exports\nexport { ClozeRenderer } from './components/ClozeRenderer';\nexport { MultipleChoiceRenderer } from './components/MultipleChoiceRenderer';\nexport { TextRenderer } from './components/TextRenderer';\nexport { ClozeAndMultipleChoiceRenderer } from './components/ClozeAndMultipleChoiceRenderer';\nexport { AppCodeEditorRenderer } from './components/AppCodeEditorRenderer';\nexport { AppCodeEditorInteractiveRenderer } from './components/AppCodeEditorInteractiveRenderer';\nexport { ErrorRenderer } from './components/ErrorRenderer';\n\n// Type exports\nexport type {\n  BitmarkNode,\n  BitmarkRendererProps,\n  UserInteraction,\n  RendererError,\n  BitmarkRendererState,\n  ClozeBit,\n  MultipleChoiceBit,\n  TextBit,\n  ClozeAndMultipleChoiceBit,\n} from './types';\n","import React, { useState, useEffect, useCallback, useMemo } from 'react';\n\nimport { Box, Alert, AlertTitle, CircularProgress } from '@mui/material';\nimport { motion } from 'framer-motion';\n\nimport { AppCodeEditorInteractiveRenderer } from './AppCodeEditorInteractiveRenderer';\nimport { AppCodeEditorRenderer } from './AppCodeEditorRenderer';\nimport { ClozeAndMultipleChoiceRenderer } from './ClozeAndMultipleChoiceRenderer';\nimport { ClozeRenderer } from './ClozeRenderer';\nimport { ErrorRenderer } from './ErrorRenderer';\nimport { MultipleChoiceRenderer } from './MultipleChoiceRenderer';\nimport { SandboxOutputGroupRenderer } from './SandboxOutputGroupRenderer';\nimport { SandboxPlaceholderRenderer } from './SandboxPlaceholderRenderer';\nimport { TextRenderer } from './TextRenderer';\nimport { BitmarkNode, BitmarkRendererProps, UserInteraction, RendererError, ClozeBit, MultipleChoiceBit, TextBit, ClozeAndMultipleChoiceBit } from '../types';\n\nconst BitmarkRenderer: React.FC<BitmarkRendererProps> = ({\n  data,\n  onInteraction,\n  className,\n  style,\n}) => {\n  const [interactions, setInteractions] = useState<UserInteraction[]>([]);\n  const [errors, setErrors] = useState<RendererError[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Handle user interactions\n  const handleInteraction = useCallback((interaction: UserInteraction) => {\n    setInteractions(prev => [...prev, interaction]);\n    onInteraction?.(interaction);\n  }, [onInteraction]);\n\n  // Group related sandbox bits\n  const groupSandboxBits = useCallback((bits: BitmarkNode[]) => {\n    const groups = new Map<string, {\n      editor?: BitmarkNode;\n      outputs: Array<{ bit: BitmarkNode; index: number }>;\n    }>();\n    const standaloneBits: Array<{ bit: BitmarkNode; index: number }> = [];\n\n    bits.forEach((bit, index) => {\n      const bitType = bit.type || bit.bit?.type || 'unknown';\n      \n      if (bitType === 'app-code-editor') {\n        // Handle ID which might be an array or string\n        let id = bit.id || bit.bit?.id || `editor-${index}`;\n        if (Array.isArray(id)) {\n          id = id[0] || `editor-${index}`;\n        }\n        if (!groups.has(id)) {\n          groups.set(id, { editor: bit, outputs: [] });\n        } else {\n          groups.get(id)!.editor = bit;\n        }\n      } else if (bitType === 'sandbox-output-json' || bitType === 'sandbox-output-bitmark') {\n        // Handle fromId which might be an array or string\n        let fromId = bit.fromId || bit.bit?.fromId || bit.properties?.fromId;\n        if (Array.isArray(fromId)) {\n          fromId = fromId[0];\n        }\n        if (fromId && groups.has(fromId)) {\n          groups.get(fromId)!.outputs.push({ bit, index });\n        } else {\n          // If no matching editor found, treat as standalone\n          standaloneBits.push({ bit, index });\n        }\n      } else {\n        standaloneBits.push({ bit, index });\n      }\n    });\n\n    return { groups, standaloneBits };\n  }, []);\n\n  // Render a single bit\n  const renderBit = useCallback((bit: BitmarkNode, index: number) => {\n    // Create a more unique key that includes the bit's ID if available\n    const bitId = bit.id ? `bit-${bit.id}-${bit.type}` : `bit-${index}-${bit.type}`;\n\n    try {\n      // Handle different bitmark structures\n      const bitType = bit.type || bit.bit?.type || 'unknown';\n      \n      // Debug logging - disabled for production build\n      // if (typeof process !== 'undefined' && process.env?.NODE_ENV === 'development') {\n      //   console.log('Rendering bit:', { bit, bitType, content: bit.content });\n      // }\n      \n      switch (bitType) {\n        case 'cloze':\n          return (\n            <ClozeRenderer\n              key={bitId}\n              bit={bit as ClozeBit}\n              onInteraction={(value: string) => handleInteraction({\n                type: 'cloze',\n                bitId,\n                value,\n                timestamp: Date.now()\n              })}\n            />\n          );\n        \n        case 'multiple-choice':\n          return (\n            <MultipleChoiceRenderer\n              key={bitId}\n              bit={bit as MultipleChoiceBit}\n              onInteraction={(value: string) => handleInteraction({\n                type: 'multiple-choice',\n                bitId,\n                value,\n                timestamp: Date.now()\n              })}\n            />\n          );\n        \n        case 'cloze-and-multiple-choice-text':\n          return (\n            <ClozeAndMultipleChoiceRenderer\n              key={bitId}\n              bit={bit as ClozeAndMultipleChoiceBit}\n              onInteraction={(value: string) => handleInteraction({\n                type: 'cloze',\n                bitId,\n                value,\n                timestamp: Date.now()\n              })}\n            />\n          );\n        \n        case 'text':\n        case 'paragraph':\n        case 'header':\n          return (\n            <TextRenderer\n              key={bitId}\n              bit={bit as TextBit}\n            />\n          );\n        \n        case 'app-code-editor':\n          return (\n            <AppCodeEditorInteractiveRenderer\n              key={bitId}\n              bit={bit}\n              onInteraction={handleInteraction}\n            />\n          );\n        \n        case 'sandbox-output-json':\n        case 'sandbox-output-bitmark':\n          return (\n            <SandboxPlaceholderRenderer\n              key={bitId}\n              bitType={bitType}\n            />\n          );\n        \n        default:\n          return (\n            <ErrorRenderer\n              key={bitId}\n              error={{\n                type: 'unsupported',\n                message: `Unsupported bit type: ${bitType}`,\n                bitType: bitType\n              }}\n            />\n          );\n      }\n    } catch (error) {\n      return (\n        <ErrorRenderer\n          key={bitId}\n          error={{\n            type: 'validation',\n            message: `Error rendering ${bit.type} bit`,\n            bitType: bit.type,\n            details: error instanceof Error ? error.message : 'Unknown error'\n          }}\n        />\n      );\n    }\n  }, [handleInteraction]);\n\n  // Validate data and collect errors\n  const validateData = useCallback((inputData: BitmarkNode | BitmarkNode[]): { data: BitmarkNode[], errors: RendererError[] } => {\n    const errors: RendererError[] = [];\n    let parsedData: BitmarkNode[] = [];\n    \n    try {\n      if (Array.isArray(inputData)) {\n        parsedData = inputData;\n      } else {\n        parsedData = [inputData];\n      }\n      \n      // Validate each bit\n      parsedData.forEach((bit, index) => {\n        const bitType = bit.type || bit.bit?.type || 'unknown';\n        \n        // Check for unsupported bit types\n        const supportedTypes = ['cloze', 'multiple-choice', 'cloze-and-multiple-choice-text', 'text', 'paragraph', 'header', 'app-code-editor', 'sandbox-output-json', 'sandbox-output-bitmark'];\n        if (!supportedTypes.includes(bitType)) {\n          errors.push({\n            type: 'unsupported',\n            message: `Unsupported bit type: ${bitType}`,\n            bitType: bitType\n          });\n        }\n      });\n      \n    } catch (error) {\n      errors.push({\n        type: 'parsing',\n        message: 'Failed to parse bitmark data',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      });\n    }\n    \n    return { data: parsedData, errors };\n  }, []);\n\n  // Process data when it changes\n  useEffect(() => {\n    setIsLoading(true);\n    \n    try {\n      const { data: parsedData, errors: validationErrors } = validateData(data);\n      setErrors(validationErrors);\n      \n      // Simulate a small delay for better UX\n      setTimeout(() => {\n        setIsLoading(false);\n      }, 100);\n    } catch (error) {\n      setErrors([{\n        type: 'parsing',\n        message: 'Failed to process bitmark data',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      }]);\n      setIsLoading(false);\n    }\n  }, [data, validateData]);\n\n  const { data: parsedData } = validateData(data);\n\n  // Group sandbox bits using useMemo to avoid hook order issues\n  const groupedData = useMemo(() => {\n    return groupSandboxBits(parsedData);\n  }, [parsedData, groupSandboxBits]);\n\n  if (isLoading) {\n    return (\n      <Box\n        className={className}\n        style={style}\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        minHeight=\"200px\"\n      >\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  return (\n    <Box\n      className={className}\n      style={style}\n      sx={{\n        padding: 2,\n        backgroundColor: 'background.paper',\n        borderRadius: 1,\n        boxShadow: 1,\n        overflow: 'auto',\n        maxHeight: '100%',\n      }}\n    >\n      {/* Display errors if any */}\n      {errors.length > 0 && (\n        <Box mb={2}>\n          {errors.map((error, index) => (\n            <Alert key={index} severity=\"warning\" sx={{ mb: 1 }}>\n              <AlertTitle>\n                {error.type === 'unsupported' ? 'Unsupported Bit Type' : \n                 error.type === 'parsing' ? 'Parsing Error' : 'Rendering Error'}\n              </AlertTitle>\n              {error.message}\n              {error.details && (\n                <Box component=\"pre\" sx={{ fontSize: '0.875rem', mt: 1, opacity: 0.8 }}>\n                  {error.details}\n                </Box>\n              )}\n            </Alert>\n          ))}\n        </Box>\n      )}\n\n      {/* Render bits */}\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.3 }}\n      >\n        {(() => {\n          const { groups, standaloneBits } = groupedData;\n          const elements: React.ReactNode[] = [];\n\n          // Render grouped sandbox bits\n          groups.forEach((group, groupId) => {\n            if (group.editor && group.outputs.length > 0) {\n              // Render as a group\n              const outputs = group.outputs.map(({ bit }) => ({\n                type: bit.type as 'sandbox-output-json' | 'sandbox-output-bitmark',\n                fromId: bit.fromId || bit.bit?.fromId || bit.properties?.fromId || '',\n                prettify: bit.prettify || bit.bit?.prettify || bit.properties?.prettify,\n                content: bit.content || bit.bit?.content || bit.body?.bodyText || bit.body?.text || '',\n              }));\n              \n              elements.push(\n                <SandboxOutputGroupRenderer\n                  key={`group-${groupId}`}\n                  editor={group.editor}\n                  outputs={outputs}\n                />\n              );\n            } else if (group.editor) {\n              // Render standalone editor\n              const editorIndex = groupId.startsWith('editor-') \n                ? parseInt(groupId.replace('editor-', '')) \n                : 0;\n              elements.push(renderBit(group.editor, editorIndex));\n            }\n          });\n\n          // Render standalone bits\n          standaloneBits.forEach(({ bit, index }) => {\n            elements.push(renderBit(bit, index));\n          });\n\n          return elements;\n        })()}\n      </motion.div>\n\n      {/* Debug info in development */}\n      {typeof process !== 'undefined' && process.env?.NODE_ENV === 'development' && (\n        <Box mt={2} p={2} bgcolor=\"grey.100\" borderRadius={1}>\n          <Box component=\"pre\" fontSize=\"0.75rem\" color=\"text.secondary\">\n            Interactions: {interactions.length}\n            {interactions.length > 0 && (\n              <Box component=\"div\" mt={1}>\n                {interactions.map((interaction, i) => (\n                  <Box key={i} component=\"div\">\n                    {interaction.type}: {interaction.value}\n                  </Box>\n                ))}\n              </Box>\n            )}\n          </Box>\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default BitmarkRenderer;\n","import React, { useState, useCallback } from 'react';\n\nimport { Code, DataObject, PlayArrow, Visibility, CodeOff } from '@mui/icons-material';\nimport { Box, Typography, Chip, Paper, Switch, FormControlLabel } from '@mui/material';\nimport { motion } from 'framer-motion';\n\nimport { ClozeRenderer } from './ClozeRenderer';\nimport { ClozeAndMultipleChoiceRenderer } from './ClozeAndMultipleChoiceRenderer';\nimport { MultipleChoiceRenderer } from './MultipleChoiceRenderer';\nimport { TextRenderer } from './TextRenderer';\nimport { UserInteraction } from '../types';\nimport { parseBitmarkContent, extractOptions, getPrimaryInteractiveType } from '../utils/ContentParser';\n\ninterface AppCodeEditorInteractiveRendererProps {\n  bit: {\n    type: string;\n    content?: string;\n    computerLanguage?: string;\n    body?: any;\n    id?: string;\n  };\n  onInteraction?: (interaction: UserInteraction) => void;\n  defaultView?: 'code' | 'interactive';\n}\n\nexport const AppCodeEditorInteractiveRenderer: React.FC<AppCodeEditorInteractiveRendererProps> = ({ \n  bit, \n  onInteraction,\n  defaultView = 'interactive'\n}) => {\n  const [viewMode, setViewMode] = useState<'code' | 'interactive'>(defaultView);\n  const [interactions, setInteractions] = useState<Array<{ type: string; value: string; timestamp: number }>>([]);\n\n  // Extract content from various possible structures\n  const getContent = () => {\n    if (bit.content) return bit.content;\n    if (bit.body) {\n      if (typeof bit.body === 'string') return bit.body;\n      if (bit.body.bodyText) return bit.body.bodyText;\n      if (bit.body.text) return bit.body.text;\n    }\n    return '';\n  };\n\n  const content = getContent();\n  const language = bit.computerLanguage || 'bitmark';\n  const id = bit.id || 'app-code-editor';\n\n  const handleInteraction = useCallback((value: string) => {\n    const interaction: UserInteraction = {\n      type: 'app-code-editor',\n      bitId: id,\n      value,\n      timestamp: Date.now()\n    };\n    \n    setInteractions(prev => [...prev, { type: 'app-code-editor', value, timestamp: Date.now() }]);\n    onInteraction?.(interaction);\n  }, [id, onInteraction]);\n\n  // Parse the content to determine what to render\n  const parsedContent = parseBitmarkContent(content);\n  const primaryType = getPrimaryInteractiveType(content);\n  const options = extractOptions(parsedContent.parts);\n\n  const getLanguageIcon = () => {\n    switch (language) {\n      case 'json':\n        return <DataObject sx={{ fontSize: '1rem' }} />;\n      case 'bitmark':\n        return <PlayArrow sx={{ fontSize: '1rem' }} />;\n      default:\n        return <Code sx={{ fontSize: '1rem' }} />;\n    }\n  };\n\n  const getLanguageColor = () => {\n    switch (language) {\n      case 'json':\n        return 'primary';\n      case 'bitmark':\n        return 'secondary';\n      default:\n        return 'default';\n    }\n  };\n\n  // Render interactive content based on the primary type\n  const renderInteractiveContent = () => {\n    if (!parsedContent.hasInteractiveElements) {\n      return (\n        <Box sx={{ p: 2, textAlign: 'center', color: 'text.secondary' }}>\n          <Typography variant=\"body2\">\n            No interactive elements found in content\n          </Typography>\n        </Box>\n      );\n    }\n\n    // Create a mock bit object for the renderers\n    const mockBit = {\n      type: primaryType || 'text',\n      content: content,\n      id: id,\n    };\n\n    switch (primaryType) {\n      case 'cloze':\n        return (\n          <ClozeRenderer\n            bit={mockBit as any}\n            onInteraction={handleInteraction}\n          />\n        );\n      \n      case 'multiple-choice':\n        return (\n          <MultipleChoiceRenderer\n            bit={mockBit as any}\n            onInteraction={handleInteraction}\n          />\n        );\n      \n      case 'cloze-and-multiple-choice':\n        return (\n          <ClozeAndMultipleChoiceRenderer\n            bit={mockBit as any}\n            onInteraction={handleInteraction}\n          />\n        );\n      \n      case 'header':\n        return (\n          <TextRenderer\n            bit={mockBit as any}\n          />\n        );\n      \n      default:\n        return (\n          <TextRenderer\n            bit={mockBit as any}\n          />\n        );\n    }\n  };\n\n  // Render code view\n  const renderCodeView = () => (\n    <Box\n      component=\"pre\"\n      sx={{\n        backgroundColor: 'grey.50',\n        p: 2,\n        borderRadius: 1,\n        border: '1px solid',\n        borderColor: 'grey.200',\n        fontFamily: 'Monaco, Menlo, \"Ubuntu Mono\", monospace',\n        fontSize: '0.875rem',\n        lineHeight: 1.5,\n        overflow: 'auto',\n        maxHeight: '300px',\n        whiteSpace: 'pre-wrap',\n        wordBreak: 'break-word',\n      }}\n    >\n      {content || 'No content available'}\n    </Box>\n  );\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 10 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.3 }}\n    >\n      <Paper\n        elevation={1}\n        sx={{\n          p: 2,\n          mb: 2,\n          border: '1px solid',\n          borderColor: 'divider',\n          borderRadius: 2,\n        }}\n      >\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 2, flexWrap: 'wrap' }}>\n          {getLanguageIcon()}\n          <Typography variant=\"h6\" sx={{ fontSize: '1rem', fontWeight: 600 }}>\n            Code Editor\n          </Typography>\n          <Chip\n            label={language.toUpperCase()}\n            size=\"small\"\n            color={getLanguageColor()}\n            variant=\"outlined\"\n          />\n          {id && (\n            <Chip\n              label={`ID: ${id}`}\n              size=\"small\"\n              variant=\"outlined\"\n            />\n          )}\n          \n          {/* View mode toggle */}\n          <Box sx={{ ml: 'auto', display: 'flex', alignItems: 'center', gap: 1 }}>\n            <FormControlLabel\n              control={\n                <Switch\n                  checked={viewMode === 'interactive'}\n                  onChange={(e) => setViewMode(e.target.checked ? 'interactive' : 'code')}\n                  size=\"small\"\n                />\n              }\n              label={\n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n                  {viewMode === 'interactive' ? <Visibility fontSize=\"small\" /> : <CodeOff fontSize=\"small\" />}\n                  <Typography variant=\"caption\">\n                    {viewMode === 'interactive' ? 'Interactive' : 'Code'}\n                  </Typography>\n                </Box>\n              }\n              sx={{ m: 0 }}\n            />\n          </Box>\n        </Box>\n        \n        {viewMode === 'code' ? renderCodeView() : renderInteractiveContent()}\n        \n        {/* Show interaction history if any */}\n        {interactions.length > 0 && (\n          <Box sx={{ mt: 2, p: 1, backgroundColor: 'grey.50', borderRadius: 1 }}>\n            <Typography variant=\"caption\" color=\"text.secondary\">\n              Interactions: {interactions.length}\n            </Typography>\n          </Box>\n        )}\n      </Paper>\n    </motion.div>\n  );\n};\n","import React, { useState } from 'react';\n\nimport { Box, TextField, Typography } from '@mui/material';\nimport { motion } from 'framer-motion';\n\nimport { ClozeBit } from '../types';\n\ninterface ClozeRendererProps {\n  bit: ClozeBit;\n  onInteraction: (value: string) => void;\n}\n\nexport const ClozeRenderer: React.FC<ClozeRendererProps> = ({ bit, onInteraction }) => {\n  const [value, setValue] = useState('');\n  const [isFocused, setIsFocused] = useState(false);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = event.target.value;\n    setValue(newValue);\n    onInteraction(newValue);\n  };\n\n  const handleFocus = () => setIsFocused(true);\n  const handleBlur = () => setIsFocused(false);\n\n  // Parse the content to find cloze placeholders\n  const parseContent = (content: string | undefined) => {\n    if (!content) {\n      return [{\n        type: 'text' as const,\n        content: 'No content available'\n      }];\n    }\n    \n    // Look for [_text] patterns in the content\n    const parts = content.split(/(\\[_[^\\]]*\\])/g);\n    return parts.map((part, index) => {\n      if (part.startsWith('[_') && part.endsWith(']')) {\n        const correctAnswer = part.slice(2, -1);\n        return {\n          type: 'cloze' as const,\n          correctAnswer,\n          placeholder: bit.placeholder || 'Fill in the blank'\n        };\n      }\n      return {\n        type: 'text' as const,\n        content: part\n      };\n    });\n  };\n\n  const parsedParts = parseContent(bit.content);\n\n  return (\n    <Box\n      sx={{\n        p: 2,\n        border: '1px solid',\n        borderColor: 'divider',\n        borderRadius: 2,\n        backgroundColor: 'background.paper',\n        boxShadow: 1,\n        mb: 2,\n      }}\n    >\n      <Typography variant=\"body1\" component=\"div\" sx={{ lineHeight: 2.5 }}>\n        {parsedParts.map((part, index) => {\n          if (part.type === 'cloze') {\n            return (\n              <motion.span\n                key={index}\n                initial={{ scale: 0.95 }}\n                animate={{ scale: 1 }}\n                transition={{ duration: 0.2 }}\n                style={{ display: 'inline-block', verticalAlign: 'middle' }}\n              >\n                <TextField\n                  value={value}\n                  onChange={handleChange}\n                  onFocus={handleFocus}\n                  onBlur={handleBlur}\n                  placeholder={part.placeholder}\n                  variant=\"outlined\"\n                  size=\"small\"\n                  sx={{\n                    mx: 0.5,\n                    minWidth: 120,\n                    '& .MuiOutlinedInput-root': {\n                      backgroundColor: isFocused ? 'primary.50' : 'grey.100',\n                      transition: 'all 0.2s ease-in-out',\n                      '&:hover': {\n                        backgroundColor: 'primary.100',\n                      },\n                      '&.Mui-focused': {\n                        backgroundColor: 'primary.50',\n                        boxShadow: '0 0 0 2px rgba(25, 118, 210, 0.2)',\n                      },\n                    },\n                  }}\n                />\n              </motion.span>\n            );\n          }\n          return (\n            <span key={index} style={{ display: 'inline' }}>\n              {part.content}\n            </span>\n          );\n        })}\n      </Typography>\n    </Box>\n  );\n};\n","import React, { useState } from 'react';\n\nimport { Box, TextField, FormControl, InputLabel, Select, MenuItem, Typography } from '@mui/material';\nimport { motion } from 'framer-motion';\n\nimport { ClozeAndMultipleChoiceBit } from '../types';\n\ninterface ClozeAndMultipleChoiceRendererProps {\n  bit: ClozeAndMultipleChoiceBit;\n  onInteraction: (value: string) => void;\n}\n\nexport const ClozeAndMultipleChoiceRenderer: React.FC<ClozeAndMultipleChoiceRendererProps> = ({ \n  bit, \n  onInteraction \n}) => {\n  const [clozeValue, setClozeValue] = useState('');\n  const [selectedValue, setSelectedValue] = useState('');\n\n  const handleClozeChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = event.target.value;\n    setClozeValue(newValue);\n    onInteraction(`cloze:${newValue}`);\n  };\n\n  const handleSelectChange = (event: any) => {\n    const newValue = event.target.value;\n    setSelectedValue(newValue);\n    onInteraction(`multiple-choice:${newValue}`);\n  };\n\n  // Parse the content to find both cloze and multiple choice patterns\n  const parseContent = (content: string | undefined) => {\n    if (!content) {\n      return [{\n        type: 'text' as const,\n        content: 'No content available'\n      }];\n    }\n    \n    // Look for [_text] and [-text][+text] patterns\n    const parts = content.split(/(\\[_[^\\]]*\\]|\\[[-+][^\\]]*\\])/g);\n    return parts.map((part, index) => {\n      if (part.startsWith('[_') && part.endsWith(']')) {\n        const correctAnswer = part.slice(2, -1);\n        return {\n          type: 'cloze' as const,\n          correctAnswer,\n          placeholder: 'Fill in the blank'\n        };\n      } else if (part.startsWith('[-') || part.startsWith('[+')) {\n        const isCorrect = part.startsWith('[+');\n        const text = part.slice(2, -1);\n        return {\n          type: 'option' as const,\n          text,\n          correct: isCorrect,\n          value: text.toLowerCase().replace(/\\s+/g, '-')\n        };\n      }\n      return {\n        type: 'text' as const,\n        content: part\n      };\n    });\n  };\n\n  const parsedParts = parseContent(bit.content);\n  const options = parsedParts.filter(part => part.type === 'option');\n\n  return (\n    <Box\n      sx={{\n        p: 2,\n        border: '1px solid',\n        borderColor: 'divider',\n        borderRadius: 2,\n        backgroundColor: 'background.paper',\n        boxShadow: 1,\n        mb: 2,\n      }}\n    >\n      <Typography variant=\"body1\" component=\"div\" sx={{ lineHeight: 2.5 }}>\n        {parsedParts.map((part, index) => {\n          if (part.type === 'cloze') {\n            return (\n              <motion.span\n                key={index}\n                initial={{ scale: 0.95 }}\n                animate={{ scale: 1 }}\n                transition={{ duration: 0.2 }}\n                style={{ display: 'inline-block', verticalAlign: 'middle' }}\n              >\n                <TextField\n                  value={clozeValue}\n                  onChange={handleClozeChange}\n                  placeholder={part.placeholder}\n                  variant=\"outlined\"\n                  size=\"small\"\n                  sx={{\n                    mx: 0.5,\n                    minWidth: 120,\n                    '& .MuiOutlinedInput-root': {\n                      backgroundColor: 'grey.100',\n                      '&:hover': {\n                        backgroundColor: 'primary.100',\n                      },\n                      '&.Mui-focused': {\n                        backgroundColor: 'primary.50',\n                        boxShadow: '0 0 0 2px rgba(25, 118, 210, 0.2)',\n                      },\n                    },\n                  }}\n                />\n              </motion.span>\n            );\n          } else if (part.type === 'option') {\n            // Don't render individual options here, they'll be handled by the dropdown\n            return null;\n          }\n          return (\n            <span key={index} style={{ display: 'inline' }}>\n              {part.content}\n            </span>\n          );\n        })}\n        {options.length > 0 && (\n          <motion.span\n            initial={{ scale: 0.95 }}\n            animate={{ scale: 1 }}\n            transition={{ duration: 0.2 }}\n            style={{ display: 'inline-block', verticalAlign: 'middle', marginLeft: 8 }}\n          >\n            <FormControl size=\"small\" sx={{ minWidth: 150 }}>\n              <InputLabel>Choose</InputLabel>\n              <Select\n                value={selectedValue}\n                onChange={handleSelectChange}\n                label=\"Choose\"\n                sx={{\n                  backgroundColor: 'grey.100',\n                  '&:hover': {\n                    backgroundColor: 'primary.100',\n                  },\n                  '&.Mui-focused': {\n                    backgroundColor: 'primary.50',\n                  },\n                }}\n              >\n                {options.map((option, optionIndex) => (\n                  <MenuItem key={optionIndex} value={option.value}>\n                    {option.text}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </motion.span>\n        )}\n      </Typography>\n    </Box>\n  );\n};\n","import React, { useState } from 'react';\n\nimport { Box, FormControl, InputLabel, Select, MenuItem, Typography } from '@mui/material';\nimport { motion } from 'framer-motion';\n\nimport { MultipleChoiceBit } from '../types';\n\ninterface MultipleChoiceRendererProps {\n  bit: MultipleChoiceBit;\n  onInteraction: (value: string) => void;\n}\n\nexport const MultipleChoiceRenderer: React.FC<MultipleChoiceRendererProps> = ({ bit, onInteraction }) => {\n  const [selectedValue, setSelectedValue] = useState(bit.selectedValue || '');\n\n  const handleChange = (event: any) => {\n    const newValue = event.target.value;\n    setSelectedValue(newValue);\n    onInteraction(newValue);\n  };\n\n  // Parse the content to find multiple choice patterns\n  const parseContent = (content: string | undefined) => {\n    if (!content) {\n      return [{\n        type: 'text' as const,\n        content: 'No content available'\n      }];\n    }\n    \n    // Look for [-text][+text] patterns in the content, handling spaces and newlines\n    // Use a more robust regex that handles spaces and newlines within brackets\n    const parts = content.split(/(\\[[-+][^\\]]*\\])/g);\n    return parts.map((part, index) => {\n      if (part.startsWith('[-') || part.startsWith('[+')) {\n        const isCorrect = part.startsWith('[+');\n        // Extract text content, trimming whitespace\n        const text = part.slice(2, -1).trim();\n        return {\n          type: 'option' as const,\n          text,\n          correct: isCorrect,\n          value: text.toLowerCase().replace(/\\s+/g, '-')\n        };\n      }\n      return {\n        type: 'text' as const,\n        content: part\n      };\n    });\n  };\n\n  const parsedParts = parseContent(bit.content);\n  const options = parsedParts.filter(part => part.type === 'option');\n\n  return (\n    <Box\n      sx={{\n        p: 2,\n        border: '1px solid',\n        borderColor: 'divider',\n        borderRadius: 2,\n        backgroundColor: 'background.paper',\n        boxShadow: 1,\n        mb: 2,\n      }}\n    >\n      <Typography variant=\"body1\" component=\"div\">\n        {parsedParts.map((part, index) => {\n          if (part.type === 'option') {\n            // Don't render individual options here, they'll be handled by the dropdown\n            return null;\n          }\n          return (\n            <span key={index}>\n              {part.content}\n            </span>\n          );\n        })}\n        {options.length > 0 && (\n          <motion.div\n            initial={{ scale: 0.95 }}\n            animate={{ scale: 1 }}\n            transition={{ duration: 0.2 }}\n            style={{ marginTop: 16 }}\n          >\n            <FormControl size=\"small\" sx={{ minWidth: 200 }}>\n              <InputLabel>Choose an option</InputLabel>\n              <Select\n                value={selectedValue}\n                onChange={handleChange}\n                label=\"Choose an option\"\n                sx={{\n                  backgroundColor: 'grey.100',\n                  '&:hover': {\n                    backgroundColor: 'primary.100',\n                  },\n                  '&.Mui-focused': {\n                    backgroundColor: 'primary.50',\n                  },\n                }}\n              >\n                {options.map((option, optionIndex) => (\n                  <MenuItem key={optionIndex} value={option.value}>\n                    {option.text}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </motion.div>\n        )}\n      </Typography>\n    </Box>\n  );\n};\n","import React from 'react';\n\nimport { Box, Typography } from '@mui/material';\nimport { motion } from 'framer-motion';\n\nimport { TextBit } from '../types';\n\ninterface TextRendererProps {\n  bit: TextBit;\n}\n\nexport const TextRenderer: React.FC<TextRendererProps> = ({ bit }) => {\n  const { content, type, level = 1, formatting } = bit;\n\n  // Parse inline formatting like **bold** and __italic__\n  const parseInlineFormatting = (text: string | undefined) => {\n    if (!text) {\n      return ['No content available'];\n    }\n    \n    const parts = text.split(/(\\*\\*[^*]+\\*\\*|__[^_]+__|==[^=]+==)/g);\n    \n    return parts.map((part, index) => {\n      if (part.startsWith('**') && part.endsWith('**')) {\n        return (\n          <Typography\n            key={index}\n            component=\"span\"\n            sx={{ fontWeight: 'bold' }}\n          >\n            {part.slice(2, -2)}\n          </Typography>\n        );\n      } else if (part.startsWith('__') && part.endsWith('__')) {\n        return (\n          <Typography\n            key={index}\n            component=\"span\"\n            sx={{ fontStyle: 'italic' }}\n          >\n            {part.slice(2, -2)}\n          </Typography>\n        );\n      } else if (part.startsWith('==') && part.endsWith('==')) {\n        return (\n          <Typography\n            key={index}\n            component=\"span\"\n            sx={{ \n              textDecoration: 'underline',\n              textDecorationColor: 'primary.main'\n            }}\n          >\n            {part.slice(2, -2)}\n          </Typography>\n        );\n      }\n      return part;\n    });\n  };\n\n  const renderContent = () => {\n    const formattedContent = parseInlineFormatting(content);\n    \n    if (type === 'header') {\n      const variant = level === 1 ? 'h4' : level === 2 ? 'h5' : 'h6';\n      return (\n        <Typography\n          variant={variant as any}\n          component=\"div\"\n          sx={{\n            fontWeight: 'bold',\n            color: 'primary.main',\n            mb: 1,\n            mt: level === 1 ? 0 : 2,\n          }}\n        >\n          {formattedContent}\n        </Typography>\n      );\n    }\n\n    return (\n      <Typography\n        variant=\"body1\"\n        component=\"div\"\n        sx={{\n          mb: 1,\n          lineHeight: 1.6,\n          ...(formatting?.bold && { fontWeight: 'bold' }),\n          ...(formatting?.italic && { fontStyle: 'italic' }),\n          ...(formatting?.underline && { textDecoration: 'underline' }),\n        }}\n      >\n        {formattedContent}\n      </Typography>\n    );\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 10 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.3 }}\n    >\n      <Box\n        sx={{\n          mb: type === 'header' ? 2 : 1,\n        }}\n      >\n        {renderContent()}\n      </Box>\n    </motion.div>\n  );\n};\n","/**\n * ContentParser utility for parsing bitmark content and identifying interactive elements\n * This utility can be used by both standalone renderers and app-code-editor renderer\n */\n\nexport interface ParsedContentPart {\n  type: 'text' | 'cloze' | 'option' | 'header';\n  content?: string;\n  correctAnswer?: string;\n  placeholder?: string;\n  text?: string;\n  correct?: boolean;\n  value?: string;\n  level?: number;\n}\n\nexport interface ParsedContent {\n  parts: ParsedContentPart[];\n  hasInteractiveElements: boolean;\n  hasCloze: boolean;\n  hasMultipleChoice: boolean;\n  hasHeader: boolean;\n}\n\n/**\n * Parse bitmark content to identify interactive elements\n */\nexport function parseBitmarkContent(content: string | undefined): ParsedContent {\n  if (!content) {\n    return {\n      parts: [{ type: 'text', content: 'No content available' }],\n      hasInteractiveElements: false,\n      hasCloze: false,\n      hasMultipleChoice: false,\n      hasHeader: false,\n    };\n  }\n\n  const parts: ParsedContentPart[] = [];\n  let hasCloze = false;\n  let hasMultipleChoice = false;\n  let hasHeader = false;\n\n  // Split content by various patterns\n  const regex = /(\\[!.*?\\]|\\[_[^\\]]*\\]|\\[[-+][^\\]]*\\])/g;\n  const splitParts = content.split(regex);\n\n  splitParts.forEach((part, index) => {\n    if (!part) return;\n\n    // Check for header pattern [!Title]\n    if (part.startsWith('[!') && part.endsWith(']')) {\n      const title = part.slice(2, -1);\n      const level = title.startsWith('#') ? title.split('#').length - 1 : 1;\n      parts.push({\n        type: 'header',\n        content: title.replace(/^#+/, '').trim(),\n        level: Math.min(level, 6), // Max level 6\n      });\n      hasHeader = true;\n    }\n    // Check for cloze pattern [_answer]\n    else if (part.startsWith('[_') && part.endsWith(']')) {\n      const correctAnswer = part.slice(2, -1);\n      parts.push({\n        type: 'cloze',\n        correctAnswer,\n        placeholder: 'Fill in the blank',\n      });\n      hasCloze = true;\n    }\n    // Check for multiple choice pattern [-wrong][+correct]\n    else if (part.startsWith('[-') || part.startsWith('[+')) {\n      const isCorrect = part.startsWith('[+');\n      const text = part.slice(2, -1).trim();\n      parts.push({\n        type: 'option',\n        text,\n        correct: isCorrect,\n        value: text.toLowerCase().replace(/\\s+/g, '-'),\n      });\n      hasMultipleChoice = true;\n    }\n    // Regular text\n    else {\n      parts.push({\n        type: 'text',\n        content: part,\n      });\n    }\n  });\n\n  return {\n    parts,\n    hasInteractiveElements: hasCloze || hasMultipleChoice || hasHeader,\n    hasCloze,\n    hasMultipleChoice,\n    hasHeader,\n  };\n}\n\n/**\n * Extract options from parsed content\n */\nexport function extractOptions(parts: ParsedContentPart[]): ParsedContentPart[] {\n  return parts.filter(part => part.type === 'option');\n}\n\n/**\n * Check if content has any interactive elements\n */\nexport function hasInteractiveContent(content: string | undefined): boolean {\n  if (!content) return false;\n  \n  return /(\\[!.*?\\]|\\[_[^\\]]*\\]|\\[[-+][^\\]]*\\])/.test(content);\n}\n\n/**\n * Get the primary interactive type from content\n */\nexport function getPrimaryInteractiveType(content: string | undefined): 'cloze' | 'multiple-choice' | 'cloze-and-multiple-choice' | 'header' | 'text' | null {\n  if (!content) return null;\n\n  const hasCloze = /\\[_[^\\]]*\\]/.test(content);\n  const hasMultipleChoice = /\\[[-+][^\\]]*\\]/.test(content);\n  const hasHeader = /\\[!.*?\\]/.test(content);\n\n  if (hasCloze && hasMultipleChoice) {\n    return 'cloze-and-multiple-choice';\n  } else if (hasCloze) {\n    return 'cloze';\n  } else if (hasMultipleChoice) {\n    return 'multiple-choice';\n  } else if (hasHeader) {\n    return 'header';\n  }\n\n  return 'text';\n}\n","import React from 'react';\n\nimport { Box, Alert, AlertTitle, Typography } from '@mui/material';\nimport { motion } from 'framer-motion';\n\nimport { RendererError } from '../types';\n\ninterface ErrorRendererProps {\n  error: RendererError;\n}\n\nexport const ErrorRenderer: React.FC<ErrorRendererProps> = ({ error }) => {\n  const getErrorIcon = () => {\n    switch (error.type) {\n      case 'unsupported':\n        return '⚠️';\n      case 'parsing':\n        return '🔍';\n      case 'validation':\n        return '❌';\n      default:\n        return '❓';\n    }\n  };\n\n  const getErrorTitle = () => {\n    switch (error.type) {\n      case 'unsupported':\n        return 'Unsupported Bit Type';\n      case 'parsing':\n        return 'Parsing Error';\n      case 'validation':\n        return 'Rendering Error';\n      default:\n        return 'Unknown Error';\n    }\n  };\n\n  const getErrorColor = () => {\n    switch (error.type) {\n      case 'unsupported':\n        return 'warning';\n      case 'parsing':\n        return 'error';\n      case 'validation':\n        return 'error';\n      default:\n        return 'info';\n    }\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, scale: 0.95 }}\n      animate={{ opacity: 1, scale: 1 }}\n      transition={{ duration: 0.3 }}\n    >\n      <Box sx={{ mb: 2 }}>\n        <Alert \n          severity={getErrorColor() as any}\n          sx={{\n            borderRadius: 2,\n            '& .MuiAlert-icon': {\n              fontSize: '1.2rem',\n            },\n          }}\n        >\n          <AlertTitle sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n            <span>{getErrorIcon()}</span>\n            {getErrorTitle()}\n          </AlertTitle>\n          \n          <Typography variant=\"body2\" sx={{ mt: 1 }}>\n            {error.message}\n          </Typography>\n          \n          {error.bitType && (\n            <Typography variant=\"caption\" sx={{ display: 'block', mt: 1, opacity: 0.8 }}>\n              Bit type: <code>{error.bitType}</code>\n            </Typography>\n          )}\n          \n          {error.details && (\n            <Box\n              component=\"pre\"\n              sx={{\n                mt: 1,\n                p: 1,\n                bgcolor: 'grey.100',\n                borderRadius: 1,\n                fontSize: '0.75rem',\n                fontFamily: 'monospace',\n                overflow: 'auto',\n                maxHeight: '100px',\n              }}\n            >\n              {error.details}\n            </Box>\n          )}\n        </Alert>\n      </Box>\n    </motion.div>\n  );\n};\n","import React from 'react';\nimport { Box, Typography, Chip, Paper, Divider } from '@mui/material';\nimport { motion } from 'framer-motion';\nimport { Code, DataObject, PlayArrow, Transform } from '@mui/icons-material';\nimport { AppCodeEditorRenderer } from './AppCodeEditorRenderer';\n\ninterface SandboxOutput {\n  type: 'sandbox-output-json' | 'sandbox-output-bitmark';\n  fromId: string;\n  prettify?: boolean | number;\n  content?: string;\n}\n\ninterface SandboxOutputGroupRendererProps {\n  editor: {\n    type: string;\n    content?: string;\n    id?: string;\n    computerLanguage?: string;\n    body?: any;\n  };\n  outputs: SandboxOutput[];\n}\n\nexport const SandboxOutputGroupRenderer: React.FC<SandboxOutputGroupRendererProps> = ({ \n  editor, \n  outputs \n}) => {\n  const getOutputIcon = (type: string) => {\n    switch (type) {\n      case 'sandbox-output-json':\n        return <DataObject sx={{ fontSize: '1rem' }} />;\n      case 'sandbox-output-bitmark':\n        return <PlayArrow sx={{ fontSize: '1rem' }} />;\n      default:\n        return <Code sx={{ fontSize: '1rem' }} />;\n    }\n  };\n\n  const getOutputTitle = (type: string) => {\n    switch (type) {\n      case 'sandbox-output-json':\n        return 'JSON Output';\n      case 'sandbox-output-bitmark':\n        return 'Bitmark Output';\n      default:\n        return 'Output';\n    }\n  };\n\n  const getOutputColor = (type: string) => {\n    switch (type) {\n      case 'sandbox-output-json':\n        return 'primary';\n      case 'sandbox-output-bitmark':\n        return 'secondary';\n      default:\n        return 'default';\n    }\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 10 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.3 }}\n    >\n      <Paper\n        elevation={2}\n        sx={{\n          p: 0,\n          mb: 3,\n          border: '1px solid',\n          borderColor: 'primary.main',\n          borderRadius: 2,\n          overflow: 'hidden',\n        }}\n      >\n        {/* Editor Section */}\n        <Box sx={{ p: 2, backgroundColor: 'primary.50' }}>\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>\n            <Transform sx={{ fontSize: '1.2rem', color: 'primary.main' }} />\n            <Typography variant=\"h6\" sx={{ fontSize: '1rem', fontWeight: 600, color: 'primary.main' }}>\n              Sandbox Group\n            </Typography>\n            <Chip\n              label={`${outputs.length} output${outputs.length !== 1 ? 's' : ''}`}\n              size=\"small\"\n              color=\"primary\"\n              variant=\"outlined\"\n            />\n          </Box>\n        </Box>\n\n        {/* Editor Content */}\n        <Box sx={{ p: 2 }}>\n          <AppCodeEditorRenderer bit={editor} />\n        </Box>\n\n        {/* Outputs Section */}\n        {outputs.length > 0 && (\n          <>\n            <Divider />\n            <Box sx={{ p: 2 }}>\n              <Typography variant=\"subtitle2\" sx={{ mb: 2, fontWeight: 600, color: 'text.secondary' }}>\n                Generated Outputs:\n              </Typography>\n              \n              {outputs.map((output, index) => (\n                <Box key={`${output.type}-${index}`} sx={{ mb: 2 }}>\n                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>\n                    {getOutputIcon(output.type)}\n                    <Typography variant=\"subtitle2\" sx={{ fontWeight: 600 }}>\n                      {getOutputTitle(output.type)}\n                    </Typography>\n                    <Chip\n                      label={output.type.replace('sandbox-output-', '').toUpperCase()}\n                      size=\"small\"\n                      color={getOutputColor(output.type)}\n                      variant=\"outlined\"\n                    />\n                    {output.prettify && (\n                      <Chip\n                        label={`Prettify: ${output.prettify}`}\n                        size=\"small\"\n                        variant=\"outlined\"\n                      />\n                    )}\n                  </Box>\n                  \n                  <Box\n                    component=\"pre\"\n                    sx={{\n                      backgroundColor: 'grey.50',\n                      p: 2,\n                      borderRadius: 1,\n                      border: '1px solid',\n                      borderColor: 'grey.200',\n                      fontFamily: 'Monaco, Menlo, \"Ubuntu Mono\", monospace',\n                      fontSize: '0.875rem',\n                      lineHeight: 1.5,\n                      overflow: 'auto',\n                      maxHeight: '200px',\n                      whiteSpace: 'pre-wrap',\n                      wordBreak: 'break-word',\n                    }}\n                  >\n                    {output.content || `[Generated ${output.type.replace('sandbox-output-', '')} output would appear here]`}\n                  </Box>\n                </Box>\n              ))}\n            </Box>\n          </>\n        )}\n      </Paper>\n    </motion.div>\n  );\n};\n","import React from 'react';\n\nimport { Code, DataObject, PlayArrow } from '@mui/icons-material';\nimport { Box, Typography, Chip, Paper } from '@mui/material';\nimport { motion } from 'framer-motion';\n\ninterface AppCodeEditorRendererProps {\n  bit: {\n    type: string;\n    content?: string;\n    id?: string;\n    computerLanguage?: string;\n    body?: any;\n  };\n}\n\nexport const AppCodeEditorRenderer: React.FC<AppCodeEditorRendererProps> = ({ bit }) => {\n  // Extract content from various possible structures\n  const getContent = () => {\n    if (bit.content) return bit.content;\n    if (bit.body) {\n      if (typeof bit.body === 'string') return bit.body;\n      if (bit.body.bodyText) return bit.body.bodyText;\n      if (bit.body.text) return bit.body.text;\n    }\n    return '';\n  };\n\n  const content = getContent();\n  const language = bit.computerLanguage || 'bitmark';\n  const id = bit.id;\n\n  const getLanguageIcon = () => {\n    switch (language) {\n      case 'json':\n        return <DataObject sx={{ fontSize: '1rem' }} />;\n      case 'bitmark':\n        return <PlayArrow sx={{ fontSize: '1rem' }} />;\n      default:\n        return <Code sx={{ fontSize: '1rem' }} />;\n    }\n  };\n\n  const getLanguageColor = () => {\n    switch (language) {\n      case 'json':\n        return 'primary';\n      case 'bitmark':\n        return 'secondary';\n      default:\n        return 'default';\n    }\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 10 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.3 }}\n    >\n      <Paper\n        elevation={1}\n        sx={{\n          p: 2,\n          mb: 2,\n          border: '1px solid',\n          borderColor: 'divider',\n          borderRadius: 2,\n        }}\n      >\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 2 }}>\n          {getLanguageIcon()}\n          <Typography variant=\"h6\" sx={{ fontSize: '1rem', fontWeight: 600 }}>\n            Code Editor\n          </Typography>\n          <Chip\n            label={language.toUpperCase()}\n            size=\"small\"\n            color={getLanguageColor()}\n            variant=\"outlined\"\n          />\n          {id && (\n            <Chip\n              label={`ID: ${id}`}\n              size=\"small\"\n              variant=\"outlined\"\n              sx={{ ml: 'auto' }}\n            />\n          )}\n        </Box>\n        \n        <Box\n          component=\"pre\"\n          sx={{\n            backgroundColor: 'grey.50',\n            p: 2,\n            borderRadius: 1,\n            border: '1px solid',\n            borderColor: 'grey.200',\n            fontFamily: 'Monaco, Menlo, \"Ubuntu Mono\", monospace',\n            fontSize: '0.875rem',\n            lineHeight: 1.5,\n            overflow: 'auto',\n            maxHeight: '300px',\n            whiteSpace: 'pre-wrap',\n            wordBreak: 'break-word',\n          }}\n        >\n          {content || 'No content available'}\n        </Box>\n      </Paper>\n    </motion.div>\n  );\n};\n","import React from 'react';\nimport { Box, Alert, AlertTitle, Typography, Chip } from '@mui/material';\nimport { motion } from 'framer-motion';\nimport { Code, PlayArrow } from '@mui/icons-material';\n\ninterface SandboxPlaceholderRendererProps {\n  bitType: string;\n}\n\nexport const SandboxPlaceholderRenderer: React.FC<SandboxPlaceholderRendererProps> = ({ bitType }) => {\n  const getSandboxIcon = () => {\n    switch (bitType) {\n      case 'app-code-editor':\n        return <Code sx={{ fontSize: '1.2rem' }} />;\n      case 'sandbox-output-json':\n        return <Code sx={{ fontSize: '1.2rem' }} />;\n      case 'sandbox-output-bitmark':\n        return <PlayArrow sx={{ fontSize: '1.2rem' }} />;\n      default:\n        return <Code sx={{ fontSize: '1.2rem' }} />;\n    }\n  };\n\n  const getSandboxTitle = () => {\n    switch (bitType) {\n      case 'app-code-editor':\n        return 'Code Editor';\n      case 'sandbox-output-json':\n        return 'Sandbox JSON Output';\n      case 'sandbox-output-bitmark':\n        return 'Sandbox Bitmark Output';\n      default:\n        return 'Sandbox Content';\n    }\n  };\n\n  const getSandboxDescription = () => {\n    switch (bitType) {\n      case 'app-code-editor':\n        return 'This code editor content is rendered from the JSON pane.';\n      case 'sandbox-output-json':\n        return 'This JSON output content is rendered from the JSON pane.';\n      case 'sandbox-output-bitmark':\n        return 'This bitmark output content is rendered from the JSON pane.';\n      default:\n        return 'This sandbox content is rendered from the JSON pane.';\n    }\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, scale: 0.95 }}\n      animate={{ opacity: 1, scale: 1 }}\n      transition={{ duration: 0.3 }}\n    >\n      <Box sx={{ mb: 2 }}>\n        <Alert \n          severity=\"info\"\n          sx={{\n            borderRadius: 2,\n            border: '2px dashed',\n            borderColor: 'primary.main',\n            backgroundColor: 'primary.50',\n            '& .MuiAlert-icon': {\n              fontSize: '1.2rem',\n            },\n          }}\n        >\n          <AlertTitle sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n            {getSandboxIcon()}\n            {getSandboxTitle()}\n          </AlertTitle>\n          \n          <Typography variant=\"body2\" sx={{ mt: 1 }}>\n            {getSandboxDescription()}\n          </Typography>\n          \n          <Box sx={{ mt: 2, display: 'flex', alignItems: 'center', gap: 1 }}>\n            <Chip \n              label=\"Sandbox Integration\" \n              size=\"small\" \n              color=\"primary\" \n              variant=\"outlined\"\n            />\n            <Typography variant=\"caption\" sx={{ opacity: 0.8 }}>\n              Rendering from JSON pane...\n            </Typography>\n          </Box>\n        </Alert>\n      </Box>\n    </motion.div>\n  );\n};\n","import React from 'react';\n\nimport { CssBaseline } from '@mui/material';\nimport { ThemeProvider as MuiThemeProvider, createTheme } from '@mui/material/styles';\n\nconst theme = createTheme({\n  palette: {\n    mode: 'light',\n    primary: {\n      main: '#1976d2',\n      light: '#42a5f5',\n      dark: '#1565c0',\n    },\n    secondary: {\n      main: '#dc004e',\n    },\n    background: {\n      default: '#fafafa',\n      paper: '#ffffff',\n    },\n  },\n  typography: {\n    fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n  },\n  components: {\n    MuiTextField: {\n      styleOverrides: {\n        root: {\n          '& .MuiOutlinedInput-root': {\n            borderRadius: 8,\n          },\n        },\n      },\n    },\n    MuiSelect: {\n      styleOverrides: {\n        root: {\n          borderRadius: 8,\n        },\n      },\n    },\n    MuiAlert: {\n      styleOverrides: {\n        root: {\n          borderRadius: 8,\n        },\n      },\n    },\n  },\n});\n\ninterface ThemeProviderProps {\n  children: React.ReactNode;\n}\n\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\n  return (\n    <MuiThemeProvider theme={theme}>\n      <CssBaseline />\n      {children}\n    </MuiThemeProvider>\n  );\n};\n"],"mappings":"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","names":["import_react","import_material","import_framer_motion","import_react","import_material","import_framer_motion","import_react","import_material","import_framer_motion","import_jsx_runtime","import_react","import_material","import_framer_motion","import_jsx_runtime","import_material","import_framer_motion","import_jsx_runtime","import_jsx_runtime","import_material","import_framer_motion","import_jsx_runtime","import_material","import_framer_motion","import_icons_material","import_icons_material","import_material","import_framer_motion","import_jsx_runtime","import_jsx_runtime","import_material","import_framer_motion","import_icons_material","import_jsx_runtime","import_jsx_runtime","errors","parsedData","import_material","import_jsx_runtime","MuiThemeProvider"]}