{"version":3,"sources":["../src/components/AIChatWindow.tsx","../src/components/ChatMessage.tsx","../src/components/ToolUsageContainer.tsx","../src/components/ToolUsageIndicator.tsx","../src/components/ChatInput.tsx","../src/components/AIChatButton.tsx","../src/hooks/useChatState.ts"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { Box, Text, Button } from 'theme-ui';\nimport { AIChatWindowProps } from '../types';\nimport { ChatMessage } from './ChatMessage';\nimport { ChatInput } from './ChatInput';\n\nexport const AIChatWindow: React.FC<AIChatWindowProps> = ({\n  isVisible,\n  onMinimize,\n  onClear,\n  onSendMessage,\n  messages,\n  isMinimized,\n  position,\n  onPositionChange,\n  onClose,\n  isLoading = false,\n}) => {\n  const [isDragging, setIsDragging] = useState(false);\n  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });\n  const windowRef = useRef<HTMLDivElement>(null);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  // Auto-scroll to bottom when new messages arrive\n  useEffect(() => {\n    if (!isMinimized && messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, [messages, isMinimized]);\n\n  const handleMouseDown = (e: React.MouseEvent) => {\n    // Allow dragging from anywhere on the header, but not from buttons\n    const target = e.target as HTMLElement;\n    const isButton = target.closest('button') || target.tagName === 'BUTTON';\n    \n    if (!isButton) {\n      setIsDragging(true);\n      setDragStart({\n        x: e.clientX - position.x,\n        y: e.clientY - position.y,\n      });\n    }\n  };\n\n  const handleMouseMove = (e: MouseEvent) => {\n    if (isDragging) {\n      const newPosition = {\n        x: e.clientX - dragStart.x,\n        y: e.clientY - dragStart.y,\n      };\n      \n      // Keep window within viewport bounds\n      const maxX = window.innerWidth - 350;\n      const maxY = window.innerHeight - (isMinimized ? 50 : 500);\n      \n      newPosition.x = Math.max(0, Math.min(newPosition.x, maxX));\n      newPosition.y = Math.max(0, Math.min(newPosition.y, maxY));\n      \n      onPositionChange(newPosition);\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDragging(false);\n  };\n\n  useEffect(() => {\n    if (isDragging) {\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n      \n      return () => {\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n    }\n  }, [isDragging, dragStart]);\n\n  if (!isVisible) {\n    return null;\n  }\n\n  return (\n    <Box\n      ref={windowRef}\n      sx={{\n        position: 'fixed',\n        top: `${position.y}px`,\n        left: `${position.x}px`,\n        width: '350px',\n        height: isMinimized ? '50px' : '500px',\n        backgroundColor: 'white',\n        border: '1px solid #e0e0e0',\n        borderRadius: '8px',\n        boxShadow: '0 4px 12px rgba(0, 0, 0, 0.15)',\n        display: 'flex',\n        flexDirection: 'column',\n        zIndex: 1000,\n        transition: 'height 0.3s ease',\n        overflow: 'hidden',\n      }}\n      onMouseDown={handleMouseDown}\n    >\n      <Box\n        sx={{\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n          padding: '8px 12px',\n          backgroundColor: '#f8f9fa',\n          borderBottom: '1px solid #e0e0e0',\n          cursor: 'move',\n          userSelect: 'none',\n        }}\n        onMouseDown={handleMouseDown}\n      >\n        <Box\n          sx={{\n            display: 'flex',\n            alignItems: 'center',\n            gap: '8px',\n            flex: 1,\n            cursor: 'move',\n          }}\n        >\n          <Box\n            sx={{\n              display: 'flex',\n              alignItems: 'center',\n              color: '#666',\n              fontSize: '12px',\n              marginRight: '8px',\n            }}\n          >\n            ⋮⋮\n          </Box>\n          <Text\n            sx={{\n              color: '#63019B',\n              fontWeight: 600,\n              fontSize: '14px',\n            }}\n          >\n            AI Chat\n          </Text>\n        </Box>\n        <Box\n          sx={{\n            display: 'flex',\n            alignItems: 'center',\n            gap: '4px',\n          }}\n        >\n          <Button\n            onClick={onClear}\n            title=\"Clear chat\"\n            sx={{\n              padding: '4px',\n              color: '#63019B',\n              backgroundColor: 'transparent',\n              border: 'none',\n              cursor: 'pointer',\n              minWidth: 'auto',\n              '&:hover': {\n                backgroundColor: 'rgba(99, 1, 155, 0.1)',\n              },\n            }}\n          >\n            🗑\n          </Button>\n          <Button\n            onClick={onMinimize}\n            title={isMinimized ? \"Restore\" : \"Minimize\"}\n            sx={{\n              padding: '4px',\n              color: '#63019B',\n              backgroundColor: 'transparent',\n              border: 'none',\n              cursor: 'pointer',\n              minWidth: 'auto',\n              '&:hover': {\n                backgroundColor: 'rgba(99, 1, 155, 0.1)',\n              },\n            }}\n          >\n            {isMinimized ? '□' : '−'}\n          </Button>\n          <Button\n            onClick={onClose}\n            title=\"Close chat\"\n            sx={{\n              padding: '4px',\n              color: '#63019B',\n              backgroundColor: 'transparent',\n              border: 'none',\n              cursor: 'pointer',\n              minWidth: 'auto',\n              '&:hover': {\n                backgroundColor: 'rgba(99, 1, 155, 0.1)',\n              },\n            }}\n          >\n            ✕\n          </Button>\n        </Box>\n      </Box>\n      \n      {!isMinimized && (\n        <>\n          <Box\n            sx={{\n              flex: 1,\n              overflowY: 'auto',\n              padding: '8px',\n              backgroundColor: 'white',\n              '&::-webkit-scrollbar': {\n                width: '6px',\n              },\n              '&::-webkit-scrollbar-track': {\n                background: '#f1f1f1',\n              },\n              '&::-webkit-scrollbar-thumb': {\n                background: '#63019B',\n                borderRadius: '3px',\n              },\n              '&::-webkit-scrollbar-thumb:hover': {\n                background: '#4a0168',\n              },\n            }}\n          >\n            {messages.length === 0 ? (\n              <Box\n                sx={{\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  height: '100%',\n                  color: '#666',\n                  textAlign: 'center',\n                }}\n              >\n                <Text sx={{ fontSize: '14px' }}>\n                  Start a conversation with AI\n                </Text>\n              </Box>\n            ) : (\n              messages.map((message) => (\n                <ChatMessage key={message.id} message={message} />\n              ))\n            )}\n            <div ref={messagesEndRef} />\n          </Box>\n          \n          <ChatInput onSendMessage={onSendMessage} isLoading={isLoading} />\n        </>\n      )}\n    </Box>\n  );\n};","import React, { useState } from 'react';\nimport { Box, Text, Button } from 'theme-ui';\nimport { ChatMessage as ChatMessageType } from '../types';\nimport { ToolUsageContainer } from './ToolUsageContainer';\nimport { ToolAnimationStyles } from './ToolUsageIndicator';\n\ninterface ChatMessageProps {\n  message: ChatMessageType;\n}\n\ninterface MessagePart {\n  type: 'text' | 'code';\n  content: string;\n  language?: string;\n}\n\nconst CodeBlockComponent: React.FC<{ code: string; language: string }> = ({ code, language }) => {\n  const [copied, setCopied] = useState(false);\n\n  const handleCopy = async () => {\n    try {\n      await navigator.clipboard.writeText(code);\n      setCopied(true);\n      setTimeout(() => setCopied(false), 2000);\n    } catch (err) {\n      console.error('Failed to copy:', err);\n    }\n  };\n\n  return (\n    <Box\n      sx={{\n        position: 'relative',\n        marginY: '8px',\n        borderRadius: '8px',\n        backgroundColor: '#1e1e1e',\n        overflow: 'hidden',\n      }}\n    >\n      <Box\n        sx={{\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          padding: '8px 12px',\n          backgroundColor: '#2d2d2d',\n          borderBottom: '1px solid #444',\n        }}\n      >\n        <Text sx={{ fontSize: '12px', color: '#888', fontFamily: 'monospace' }}>\n          {language || 'code'}\n        </Text>\n        <Button\n          onClick={handleCopy}\n          sx={{\n            padding: '4px 12px',\n            fontSize: '12px',\n            backgroundColor: copied ? '#4caf50' : '#444',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: 'pointer',\n            transition: 'background-color 0.2s',\n            '&:hover': {\n              backgroundColor: copied ? '#4caf50' : '#555',\n            },\n          }}\n        >\n          {copied ? '✓ Copied!' : 'Copy'}\n        </Button>\n      </Box>\n      <Box\n        sx={{\n          padding: '12px',\n          overflowX: 'auto',\n        }}\n      >\n        <Text\n          as=\"pre\"\n          sx={{\n            margin: 0,\n            fontFamily: 'Monaco, Consolas, \"Courier New\", monospace',\n            fontSize: '13px',\n            color: '#d4d4d4',\n            whiteSpace: 'pre',\n            lineHeight: '1.5',\n          }}\n        >\n          {code}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nconst renderMarkdown = (text: string): React.ReactNode => {\n  // Split by lines to handle lists and paragraphs\n  const lines = text.split('\\n');\n  const elements: React.ReactNode[] = [];\n  let currentList: React.ReactNode[] = [];\n  let listKey = 0;\n\n  const processInlineMarkdown = (line: string): React.ReactNode[] => {\n    const parts: React.ReactNode[] = [];\n    let remaining = line;\n    let key = 0;\n\n    // Process bold text (**text**)\n    const boldRegex = /\\*\\*([^*]+)\\*\\*/g;\n    let lastIndex = 0;\n    let match;\n\n    while ((match = boldRegex.exec(remaining)) !== null) {\n      // Add text before bold\n      if (match.index > lastIndex) {\n        parts.push(<span key={`text-${key++}`}>{remaining.substring(lastIndex, match.index)}</span>);\n      }\n      // Add bold text\n      parts.push(<strong key={`bold-${key++}`}>{match[1]}</strong>);\n      lastIndex = match.index + match[0].length;\n    }\n\n    // Add remaining text\n    if (lastIndex < remaining.length) {\n      parts.push(<span key={`text-${key++}`}>{remaining.substring(lastIndex)}</span>);\n    }\n\n    return parts.length > 0 ? parts : [remaining];\n  };\n\n  lines.forEach((line, index) => {\n    // Handle bullet points\n    if (line.trim().startsWith('*') && !line.trim().startsWith('**')) {\n      const content = line.trim().substring(1).trim();\n      currentList.push(\n        <li key={`li-${index}`} style={{ marginLeft: '1em', listStyleType: 'disc' }}>\n          {processInlineMarkdown(content)}\n        </li>\n      );\n    } else {\n      // If we have a list in progress, close it\n      if (currentList.length > 0) {\n        elements.push(\n          <ul key={`ul-${listKey++}`} style={{ margin: '0.5em 0', paddingLeft: '1.5em' }}>\n            {currentList}\n          </ul>\n        );\n        currentList = [];\n      }\n\n      // Handle regular text with inline markdown\n      if (line.trim()) {\n        elements.push(\n          <div key={`p-${index}`} style={{ marginBottom: '0.5em' }}>\n            {processInlineMarkdown(line)}\n          </div>\n        );\n      } else {\n        // Empty line - add spacing\n        elements.push(<br key={`br-${index}`} />);\n      }\n    }\n  });\n\n  // Close any remaining list\n  if (currentList.length > 0) {\n    elements.push(\n      <ul key={`ul-${listKey++}`} style={{ margin: '0.5em 0', paddingLeft: '1.5em' }}>\n        {currentList}\n      </ul>\n    );\n  }\n\n  return <>{elements}</>;\n};\n\nconst parseMessageContent = (content: string): MessagePart[] => {\n  const parts: MessagePart[] = [];\n  const codeBlockRegex = /```(\\w+)?\\n([\\s\\S]*?)```/g;\n  let lastIndex = 0;\n  let match;\n\n  while ((match = codeBlockRegex.exec(content)) !== null) {\n    // Add text before code block\n    if (match.index > lastIndex) {\n      const textContent = content.substring(lastIndex, match.index);\n      if (textContent.trim()) {\n        parts.push({ type: 'text', content: textContent });\n      }\n    }\n\n    // Add code block\n    parts.push({\n      type: 'code',\n      content: match[2].trim(),\n      language: match[1] || 'text',\n    });\n\n    lastIndex = match.index + match[0].length;\n  }\n\n  // Add remaining text\n  if (lastIndex < content.length) {\n    const textContent = content.substring(lastIndex);\n    if (textContent.trim()) {\n      parts.push({ type: 'text', content: textContent });\n    }\n  }\n\n  // If no code blocks found, return the entire content as text\n  if (parts.length === 0) {\n    parts.push({ type: 'text', content });\n  }\n\n  return parts;\n};\n\nexport const ChatMessage: React.FC<ChatMessageProps> = ({ message }) => {\n  // Debug logging\n  console.log('ChatMessage received:', message);\n  console.log('Tool usage indicators:', message.toolUsageIndicators);\n  console.log('Has tool usage:', message.hasToolUsage);\n  \n  const getToolDisplayName = (toolName: string) => {\n    const toolNames: Record<string, string> = {\n      'get_bitmark_general_info': '📚 General Info',\n      'get_bitmark_code_info': '💻 Code Info',\n      'get_user_input_info': '🔧 Input Info'\n    };\n    return toolNames[toolName] || `🔧 ${toolName}`;\n  };\n\n  const getToolDescription = (tool: any) => {\n    if (tool.function_name === 'get_bitmark_general_info') {\n      return `Retrieved ${tool.args?.topic || 'overview'} information`;\n    } else if (tool.function_name === 'get_bitmark_code_info') {\n      return `Retrieved ${tool.args?.code_type || 'syntax'} information`;\n    } else if (tool.function_name === 'get_user_input_info') {\n      return `Retrieved ${tool.args?.input_type || 'general'} information`;\n    }\n    return 'Used tool';\n  };\n\n  return (\n    <>\n      <ToolAnimationStyles />\n      <Box\n        sx={{\n          display: 'flex',\n          justifyContent: message.sender === 'user' ? 'flex-end' : 'flex-start',\n          marginBottom: '8px',\n        }}\n      >\n        <Box>\n          {/* New animated tool usage indicators */}\n          {message.sender === 'ai' && message.toolUsageIndicators && message.toolUsageIndicators.length > 0 && (\n            <ToolUsageContainer tools={message.toolUsageIndicators} />\n          )}\n          \n          {/* Legacy tool usage indicators (for backward compatibility) */}\n          {message.toolsUsed && message.toolsUsed.length > 0 && (\n            <Box\n              sx={{\n                marginBottom: '6px',\n                display: 'flex',\n                flexWrap: 'wrap',\n                gap: '4px',\n              }}\n            >\n              {message.toolsUsed.map((tool, index) => (\n                <Box\n                  key={index}\n                  sx={{\n                    display: 'inline-flex',\n                    alignItems: 'center',\n                    padding: '2px 6px',\n                    backgroundColor: '#e8f4fd',\n                    border: '1px solid #63019B',\n                    borderRadius: '12px',\n                    fontSize: '0.7rem',\n                    color: '#63019B',\n                    fontWeight: '500',\n                  }}\n                  title={getToolDescription(tool)}\n                >\n                  {getToolDisplayName(tool.function_name)}\n                </Box>\n              ))}\n            </Box>\n          )}\n        \n          <Box\n            sx={{\n              maxWidth: '70%',\n              minWidth: message.sender === 'ai' ? '300px' : 'auto',\n            }}\n          >\n            {message.sender === 'ai' ? (\n              // Parse and render AI messages with code blocks\n              parseMessageContent(message.content).map((part, index) => (\n                part.type === 'code' ? (\n                  <CodeBlockComponent key={index} code={part.content} language={part.language || 'text'} />\n                ) : (\n                  <Box\n                    key={index}\n                    sx={{\n                      padding: '8px 12px',\n                      borderRadius: '18px',\n                      backgroundColor: '#f0f0f0',\n                      color: '#333',\n                      wordWrap: 'break-word',\n                      marginY: index > 0 ? '4px' : 0,\n                    }}\n                  >\n                    <Box\n                      sx={{\n                        fontSize: '14px',\n                      }}\n                    >\n                      {renderMarkdown(part.content)}\n                    </Box>\n                  </Box>\n                )\n              ))\n            ) : (\n              // User messages stay simple\n              <Box\n                sx={{\n                  padding: '8px 12px',\n                  borderRadius: '18px',\n                  backgroundColor: '#63019B',\n                  color: 'white',\n                  wordWrap: 'break-word',\n                }}\n              >\n                <Text\n                  sx={{\n                    fontSize: '14px',\n                    whiteSpace: 'pre-wrap',\n                  }}\n                >\n                  {message.content}\n                </Text>\n              </Box>\n            )}\n          </Box>\n          <Text\n            sx={{\n              fontSize: '0.75rem',\n              color: '#666',\n              marginTop: '4px',\n              textAlign: message.sender === 'user' ? 'right' : 'left',\n            }}\n          >\n            {message.timestamp.toLocaleTimeString()}\n          </Text>\n        </Box>\n      </Box>\n    </>\n  );\n};\n","import React from 'react';\nimport { Box, Text } from 'theme-ui';\nimport { ToolUsage } from '../types';\nimport { ToolUsageIndicator } from './ToolUsageIndicator';\n\ninterface ToolUsageContainerProps {\n  tools: ToolUsage[];\n  isVisible?: boolean;\n}\n\nexport const ToolUsageContainer: React.FC<ToolUsageContainerProps> = ({ \n  tools, \n  isVisible = true \n}) => {\n  // Debug logging\n  console.log('ToolUsageContainer received:', { tools, isVisible });\n  \n  if (!tools || tools.length === 0 || !isVisible) {\n    console.log('ToolUsageContainer: Not rendering - no tools or not visible');\n    return null;\n  }\n\n  return (\n    <Box\n      sx={{\n        margin: '10px 0',\n        padding: '10px',\n        background: '#f8f9fa',\n        borderRadius: '8px',\n        borderLeft: '4px solid #007bff',\n        opacity: isVisible ? 1 : 0,\n        transform: isVisible ? 'translateY(0)' : 'translateY(-10px)',\n        transition: 'all 0.3s ease-out',\n      }}\n    >\n      <Text\n        sx={{\n          marginBottom: '8px',\n          fontSize: '12px',\n          color: '#666',\n          fontWeight: 500,\n        }}\n      >\n        🤖 AI is using tools...\n      </Text>\n      <Box\n        sx={{\n          display: 'flex',\n          flexWrap: 'wrap',\n          gap: '4px',\n        }}\n      >\n        {tools.map((tool, index) => (\n          <ToolUsageIndicator \n            key={`${tool.function_name}-${index}`} \n            tool={tool} \n            index={index}\n          />\n        ))}\n      </Box>\n    </Box>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { Box, Text } from 'theme-ui';\nimport { ToolUsage } from '../types';\n\ninterface ToolUsageIndicatorProps {\n  tool: ToolUsage;\n  index?: number;\n}\n\nexport const ToolUsageIndicator: React.FC<ToolUsageIndicatorProps> = ({ tool, index = 0 }) => {\n  const [isCompleted, setIsCompleted] = useState(false);\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    // Stagger the appearance of multiple tools\n    const timer = setTimeout(() => {\n      setIsVisible(true);\n    }, index * 300);\n\n    return () => clearTimeout(timer);\n  }, [index]);\n\n  useEffect(() => {\n    if (tool.status === 'completed') {\n      const timer = setTimeout(() => setIsCompleted(true), 1000);\n      return () => clearTimeout(timer);\n    }\n  }, [tool.status]);\n\n  if (!isVisible) return null;\n\n  return (\n    <Box\n      sx={{\n        display: 'inline-flex',\n        alignItems: 'center',\n        gap: '8px',\n        padding: '8px 12px',\n        margin: '4px',\n        borderRadius: '20px',\n        background: isCompleted \n          ? 'linear-gradient(45deg, #e8f5e8, #d4edda)'\n          : 'linear-gradient(45deg, #f0f0f0, #e0e0e0)',\n        border: `1px solid ${isCompleted ? '#c3e6cb' : '#ddd'}`,\n        fontSize: '14px',\n        animation: isCompleted ? 'toolComplete 0.5s ease-out' : 'toolPulse 1.5s ease-in-out infinite',\n        opacity: isVisible ? 1 : 0,\n        transform: isVisible ? 'translateY(0)' : 'translateY(10px)',\n        transition: 'all 0.3s ease-out',\n      }}\n    >\n      <Text\n        sx={{\n          fontSize: '16px',\n          animation: isCompleted ? 'none' : 'toolBounce 1s ease-in-out infinite',\n        }}\n      >\n        {tool.emoji}\n      </Text>\n      <Text\n        sx={{\n          fontWeight: 500,\n          color: '#333',\n        }}\n      >\n        {tool.description}\n      </Text>\n    </Box>\n  );\n};\n\n// CSS animations (injected via style tag)\nexport const ToolAnimationStyles = () => (\n  <style>\n    {`\n      @keyframes toolPulse {\n        0%, 100% { \n          transform: scale(1); \n          opacity: 0.8; \n        }\n        50% { \n          transform: scale(1.05); \n          opacity: 1; \n        }\n      }\n      \n      @keyframes toolBounce {\n        0%, 100% { \n          transform: translateY(0); \n        }\n        50% { \n          transform: translateY(-2px); \n        }\n      }\n      \n      @keyframes toolComplete {\n        0% { \n          transform: scale(1); \n        }\n        50% { \n          transform: scale(1.1); \n        }\n        100% { \n          transform: scale(1); \n        }\n      }\n    `}\n  </style>\n);\n","import React, { useState, KeyboardEvent } from 'react';\nimport { Box, Input, Button } from 'theme-ui';\n\ninterface ChatInputProps {\n  onSendMessage: (message: string) => void;\n  disabled?: boolean;\n  isLoading?: boolean;\n}\n\nexport const ChatInput: React.FC<ChatInputProps> = ({ onSendMessage, disabled = false, isLoading = false }) => {\n  const [message, setMessage] = useState('');\n\n  const handleSend = () => {\n    if (message.trim() && !disabled) {\n      onSendMessage(message.trim());\n      setMessage('');\n    }\n  };\n\n  const handleKeyPress = (event: KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Enter' && !event.shiftKey) {\n      event.preventDefault();\n      handleSend();\n    }\n  };\n\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        alignItems: 'center',\n        padding: '8px',\n        borderTop: '1px solid #e0e0e0',\n        backgroundColor: 'white',\n      }}\n    >\n      <Input\n        value={message}\n        onChange={(e) => setMessage(e.target.value)}\n        onKeyPress={handleKeyPress}\n        placeholder=\"Type your message...\"\n        sx={{\n          flex: 1,\n          marginRight: '8px',\n          borderRadius: '20px',\n          border: '1px solid #e0e0e0',\n          padding: '8px 12px',\n          fontSize: '14px',\n          '&:focus': {\n            outline: 'none',\n            borderColor: '#63019B',\n          },\n          '&:hover': {\n            borderColor: '#63019B',\n          },\n        }}\n        disabled={disabled || isLoading}\n      />\n      <Button\n        onClick={handleSend}\n        disabled={!message.trim() || disabled || isLoading}\n        sx={{\n          backgroundColor: isLoading ? '#ccc' : '#63019B',\n          color: 'white',\n          border: 'none',\n          borderRadius: '50%',\n          width: '32px',\n          height: '32px',\n          padding: 0,\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          cursor: isLoading ? 'not-allowed' : 'pointer',\n          '&:hover': {\n            backgroundColor: isLoading ? '#ccc' : '#4a0168',\n          },\n          '&:disabled': {\n            backgroundColor: '#ccc',\n            color: '#666',\n            cursor: 'not-allowed',\n          },\n        }}\n      >\n        {isLoading ? '⏳' : '➤'}\n      </Button>\n    </Box>\n  );\n};\n","import React from 'react';\nimport { Button } from 'theme-ui';\nimport { AIChatButtonProps } from '../types';\n\nexport const AIChatButton: React.FC<AIChatButtonProps> = ({ onClick, isVisible }) => {\n  return (\n    <Button\n      onClick={onClick}\n      sx={{\n        backgroundColor: '#63019B',\n        color: 'white',\n        fontSize: '12px',\n        padding: '4px 8px',\n        minWidth: 'auto',\n        height: '28px',\n        borderRadius: '4px',\n        textTransform: 'none',\n        border: 'none',\n        cursor: 'pointer',\n        '&:hover': {\n          backgroundColor: '#4a0168',\n        },\n        '&:disabled': {\n          backgroundColor: '#ccc',\n          color: '#666',\n        },\n      }}\n    >\n      AI Chat\n    </Button>\n  );\n};\n","import { useState, useCallback } from 'react';\nimport { ChatState, ChatMessage, ToolUsage } from '../types';\n\nconst generateId = () => Math.random().toString(36).substr(2, 9);\n\nexport const useChatState = (initialPosition = { x: window.innerWidth - 370, y: 50 }) => {\n  const [chatState, setChatState] = useState<ChatState>({\n    messages: [],\n    isMinimized: false,\n    position: initialPosition,\n    isVisible: false,\n  });\n  const [isLoading, setIsLoading] = useState(false);\n\n  const addMessage = useCallback((\n    content: string, \n    sender: 'user' | 'ai', \n    toolsUsed?: ToolUsage[], \n    toolUsageIndicators?: ToolUsage[],\n    hasToolUsage?: boolean\n  ) => {\n    const newMessage: ChatMessage = {\n      id: generateId(),\n      content,\n      sender,\n      timestamp: new Date(),\n      toolsUsed,\n      toolUsageIndicators,\n      hasToolUsage,\n    };\n\n    setChatState(prev => ({\n      ...prev,\n      messages: [...prev.messages, newMessage],\n    }));\n  }, []);\n\n  const clearMessages = useCallback(() => {\n    setChatState(prev => ({\n      ...prev,\n      messages: [],\n    }));\n  }, []);\n\n  const toggleVisibility = useCallback(() => {\n    setChatState(prev => ({\n      ...prev,\n      isVisible: !prev.isVisible,\n    }));\n  }, []);\n\n  const toggleMinimize = useCallback(() => {\n    setChatState(prev => ({\n      ...prev,\n      isMinimized: !prev.isMinimized,\n    }));\n  }, []);\n\n  const updatePosition = useCallback((position: { x: number; y: number }) => {\n    setChatState(prev => ({\n      ...prev,\n      position,\n    }));\n  }, []);\n\n  const sendMessage = useCallback(async (message: string, paneContent?: Record<string, string>) => {\n    addMessage(message, 'user');\n    setIsLoading(true);\n    \n    try {\n      // Prepare conversation history for the API\n      const conversationHistory = chatState.messages.map(msg => ({\n        role: msg.sender === 'ai' ? 'assistant' : msg.sender,\n        content: msg.content,\n        timestamp: msg.timestamp.toISOString()\n      }));\n      \n      // Call the backend API\n      const response = await fetch('http://localhost:8000/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          message: message,\n          conversation_history: conversationHistory,\n          pane_content: paneContent\n        })\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      \n      // Debug logging\n      console.log('Backend response:', data);\n      console.log('Tools used:', data.tools_used);\n      console.log('Tool usage indicators:', data.tool_usage_indicators);\n      console.log('Has tool usage:', data.has_tool_usage);\n      \n      if (data.success) {\n        addMessage(\n          data.response, \n          'ai', \n          data.tools_used || [], \n          data.tool_usage_indicators || [],\n          data.has_tool_usage || false\n        );\n      } else {\n        addMessage(`Error: ${data.error || 'Failed to get response from AI'}`, 'ai');\n      }\n    } catch (error) {\n      console.error('Error sending message:', error);\n      addMessage(`Error: ${error instanceof Error ? error.message : 'Failed to connect to AI service'}`, 'ai');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [addMessage, chatState.messages]);\n\n  return {\n    chatState,\n    isLoading,\n    addMessage,\n    clearMessages,\n    toggleVisibility,\n    toggleMinimize,\n    updatePosition,\n    sendMessage,\n  };\n};\n"],"mappings":"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","names":["useState","useEffect","Box","Text","Button","useState","Box","Text","Box","Text","jsx","jsxs","Box","Text","jsx","jsxs","useState","Box","Text","useState","Box","Button","jsx","jsxs","Fragment","jsx","jsxs","useState","useEffect","Box","Text","Button","Button","jsx","useState"]}