{"version":3,"sources":["../src/index.ts","../src/components/AIChatWindow.tsx","../src/components/ChatMessage.tsx","../src/components/ChatInput.tsx","../src/components/AIChatButton.tsx","../src/hooks/useChatState.ts"],"sourcesContent":["// Main exports for bitmark-ai-chat\nexport { AIChatWindow } from './components/AIChatWindow';\nexport { AIChatButton } from './components/AIChatButton';\nexport { ChatMessage as ChatMessageComponent } from './components/ChatMessage';\nexport { ChatInput } from './components/ChatInput';\n\n// Hook exports\nexport { useChatState } from './hooks/useChatState';\n\n// Type exports\nexport type { ChatMessage, ChatState, AIChatWindowProps, AIChatButtonProps } from './types';\n","import React, { useState, useRef, useEffect } from 'react';\nimport { Box, Text, Button } from 'theme-ui';\nimport { AIChatWindowProps } from '../types';\nimport { ChatMessage } from './ChatMessage';\nimport { ChatInput } from './ChatInput';\n\nexport const AIChatWindow: React.FC<AIChatWindowProps> = ({\n  isVisible,\n  onMinimize,\n  onClear,\n  onSendMessage,\n  messages,\n  isMinimized,\n  position,\n  onPositionChange,\n  onClose,\n}) => {\n  const [isDragging, setIsDragging] = useState(false);\n  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });\n  const windowRef = useRef<HTMLDivElement>(null);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  // Auto-scroll to bottom when new messages arrive\n  useEffect(() => {\n    if (!isMinimized && messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, [messages, isMinimized]);\n\n  const handleMouseDown = (e: React.MouseEvent) => {\n    // Allow dragging from anywhere on the header, but not from buttons\n    const target = e.target as HTMLElement;\n    const isButton = target.closest('button') || target.tagName === 'BUTTON';\n    \n    if (!isButton) {\n      setIsDragging(true);\n      setDragStart({\n        x: e.clientX - position.x,\n        y: e.clientY - position.y,\n      });\n    }\n  };\n\n  const handleMouseMove = (e: MouseEvent) => {\n    if (isDragging) {\n      const newPosition = {\n        x: e.clientX - dragStart.x,\n        y: e.clientY - dragStart.y,\n      };\n      \n      // Keep window within viewport bounds\n      const maxX = window.innerWidth - 350;\n      const maxY = window.innerHeight - (isMinimized ? 50 : 500);\n      \n      newPosition.x = Math.max(0, Math.min(newPosition.x, maxX));\n      newPosition.y = Math.max(0, Math.min(newPosition.y, maxY));\n      \n      onPositionChange(newPosition);\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDragging(false);\n  };\n\n  useEffect(() => {\n    if (isDragging) {\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n      \n      return () => {\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n    }\n  }, [isDragging, dragStart]);\n\n  if (!isVisible) {\n    return null;\n  }\n\n  return (\n    <Box\n      ref={windowRef}\n      sx={{\n        position: 'fixed',\n        top: `${position.y}px`,\n        left: `${position.x}px`,\n        width: '350px',\n        height: isMinimized ? '50px' : '500px',\n        backgroundColor: 'white',\n        border: '1px solid #e0e0e0',\n        borderRadius: '8px',\n        boxShadow: '0 4px 12px rgba(0, 0, 0, 0.15)',\n        display: 'flex',\n        flexDirection: 'column',\n        zIndex: 1000,\n        transition: 'height 0.3s ease',\n        overflow: 'hidden',\n      }}\n      onMouseDown={handleMouseDown}\n    >\n      <Box\n        sx={{\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n          padding: '8px 12px',\n          backgroundColor: '#f8f9fa',\n          borderBottom: '1px solid #e0e0e0',\n          cursor: 'move',\n          userSelect: 'none',\n        }}\n        onMouseDown={handleMouseDown}\n      >\n        <Box\n          sx={{\n            display: 'flex',\n            alignItems: 'center',\n            gap: '8px',\n            flex: 1,\n            cursor: 'move',\n          }}\n        >\n          <Box\n            sx={{\n              display: 'flex',\n              alignItems: 'center',\n              color: '#666',\n              fontSize: '12px',\n              marginRight: '8px',\n            }}\n          >\n            â‹®â‹®\n          </Box>\n          <Text\n            sx={{\n              color: '#63019B',\n              fontWeight: 600,\n              fontSize: '14px',\n            }}\n          >\n            AI Chat\n          </Text>\n        </Box>\n        <Box\n          sx={{\n            display: 'flex',\n            alignItems: 'center',\n            gap: '4px',\n          }}\n        >\n          <Button\n            onClick={onClear}\n            title=\"Clear chat\"\n            sx={{\n              padding: '4px',\n              color: '#63019B',\n              backgroundColor: 'transparent',\n              border: 'none',\n              cursor: 'pointer',\n              minWidth: 'auto',\n              '&:hover': {\n                backgroundColor: 'rgba(99, 1, 155, 0.1)',\n              },\n            }}\n          >\n            ðŸ—‘\n          </Button>\n          <Button\n            onClick={onMinimize}\n            title={isMinimized ? \"Restore\" : \"Minimize\"}\n            sx={{\n              padding: '4px',\n              color: '#63019B',\n              backgroundColor: 'transparent',\n              border: 'none',\n              cursor: 'pointer',\n              minWidth: 'auto',\n              '&:hover': {\n                backgroundColor: 'rgba(99, 1, 155, 0.1)',\n              },\n            }}\n          >\n            {isMinimized ? 'â–¡' : 'âˆ’'}\n          </Button>\n          <Button\n            onClick={onClose}\n            title=\"Close chat\"\n            sx={{\n              padding: '4px',\n              color: '#63019B',\n              backgroundColor: 'transparent',\n              border: 'none',\n              cursor: 'pointer',\n              minWidth: 'auto',\n              '&:hover': {\n                backgroundColor: 'rgba(99, 1, 155, 0.1)',\n              },\n            }}\n          >\n            âœ•\n          </Button>\n        </Box>\n      </Box>\n      \n      {!isMinimized && (\n        <>\n          <Box\n            sx={{\n              flex: 1,\n              overflowY: 'auto',\n              padding: '8px',\n              backgroundColor: 'white',\n              '&::-webkit-scrollbar': {\n                width: '6px',\n              },\n              '&::-webkit-scrollbar-track': {\n                background: '#f1f1f1',\n              },\n              '&::-webkit-scrollbar-thumb': {\n                background: '#63019B',\n                borderRadius: '3px',\n              },\n              '&::-webkit-scrollbar-thumb:hover': {\n                background: '#4a0168',\n              },\n            }}\n          >\n            {messages.length === 0 ? (\n              <Box\n                sx={{\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  height: '100%',\n                  color: '#666',\n                  textAlign: 'center',\n                }}\n              >\n                <Text sx={{ fontSize: '14px' }}>\n                  Start a conversation with AI\n                </Text>\n              </Box>\n            ) : (\n              messages.map((message) => (\n                <ChatMessage key={message.id} message={message} />\n              ))\n            )}\n            <div ref={messagesEndRef} />\n          </Box>\n          \n          <ChatInput onSendMessage={onSendMessage} />\n        </>\n      )}\n    </Box>\n  );\n};","import React from 'react';\nimport { Box, Text } from 'theme-ui';\nimport { ChatMessage as ChatMessageType } from '../types';\n\ninterface ChatMessageProps {\n  message: ChatMessageType;\n}\n\nexport const ChatMessage: React.FC<ChatMessageProps> = ({ message }) => {\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        justifyContent: message.sender === 'user' ? 'flex-end' : 'flex-start',\n        marginBottom: '8px',\n      }}\n    >\n      <Box>\n        <Box\n          sx={{\n            maxWidth: '70%',\n            padding: '8px 12px',\n            borderRadius: '18px',\n            backgroundColor: message.sender === 'user' ? '#63019B' : '#f0f0f0',\n            color: message.sender === 'user' ? 'white' : '#333',\n            wordWrap: 'break-word',\n          }}\n        >\n          <Text\n            sx={{\n              fontSize: '14px',\n              whiteSpace: 'pre-wrap',\n            }}\n          >\n            {message.content}\n          </Text>\n        </Box>\n        <Text\n          sx={{\n            fontSize: '0.75rem',\n            color: '#666',\n            marginTop: '4px',\n            textAlign: message.sender === 'user' ? 'right' : 'left',\n          }}\n        >\n          {message.timestamp.toLocaleTimeString()}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n","import React, { useState, KeyboardEvent } from 'react';\nimport { Box, Input, Button } from 'theme-ui';\n\ninterface ChatInputProps {\n  onSendMessage: (message: string) => void;\n  disabled?: boolean;\n}\n\nexport const ChatInput: React.FC<ChatInputProps> = ({ onSendMessage, disabled = false }) => {\n  const [message, setMessage] = useState('');\n\n  const handleSend = () => {\n    if (message.trim() && !disabled) {\n      onSendMessage(message.trim());\n      setMessage('');\n    }\n  };\n\n  const handleKeyPress = (event: KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Enter' && !event.shiftKey) {\n      event.preventDefault();\n      handleSend();\n    }\n  };\n\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        alignItems: 'center',\n        padding: '8px',\n        borderTop: '1px solid #e0e0e0',\n        backgroundColor: 'white',\n      }}\n    >\n      <Input\n        value={message}\n        onChange={(e) => setMessage(e.target.value)}\n        onKeyPress={handleKeyPress}\n        placeholder=\"Type your message...\"\n        sx={{\n          flex: 1,\n          marginRight: '8px',\n          borderRadius: '20px',\n          border: '1px solid #e0e0e0',\n          padding: '8px 12px',\n          fontSize: '14px',\n          '&:focus': {\n            outline: 'none',\n            borderColor: '#63019B',\n          },\n          '&:hover': {\n            borderColor: '#63019B',\n          },\n        }}\n        disabled={disabled}\n      />\n      <Button\n        onClick={handleSend}\n        disabled={!message.trim() || disabled}\n        sx={{\n          backgroundColor: '#63019B',\n          color: 'white',\n          border: 'none',\n          borderRadius: '50%',\n          width: '32px',\n          height: '32px',\n          padding: 0,\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          cursor: 'pointer',\n          '&:hover': {\n            backgroundColor: '#4a0168',\n          },\n          '&:disabled': {\n            backgroundColor: '#ccc',\n            color: '#666',\n            cursor: 'not-allowed',\n          },\n        }}\n      >\n        âž¤\n      </Button>\n    </Box>\n  );\n};\n","import React from 'react';\nimport { Button } from 'theme-ui';\nimport { AIChatButtonProps } from '../types';\n\nexport const AIChatButton: React.FC<AIChatButtonProps> = ({ onClick, isVisible }) => {\n  return (\n    <Button\n      onClick={onClick}\n      sx={{\n        backgroundColor: '#63019B',\n        color: 'white',\n        fontSize: '12px',\n        padding: '4px 8px',\n        minWidth: 'auto',\n        height: '28px',\n        borderRadius: '4px',\n        textTransform: 'none',\n        border: 'none',\n        cursor: 'pointer',\n        '&:hover': {\n          backgroundColor: '#4a0168',\n        },\n        '&:disabled': {\n          backgroundColor: '#ccc',\n          color: '#666',\n        },\n      }}\n    >\n      AI Chat\n    </Button>\n  );\n};\n","import { useState, useCallback } from 'react';\nimport { ChatState, ChatMessage } from '../types';\n\nconst generateId = () => Math.random().toString(36).substr(2, 9);\n\nexport const useChatState = (initialPosition = { x: window.innerWidth - 370, y: 50 }) => {\n  const [chatState, setChatState] = useState<ChatState>({\n    messages: [],\n    isMinimized: false,\n    position: initialPosition,\n    isVisible: false,\n  });\n\n  const addMessage = useCallback((content: string, sender: 'user' | 'ai') => {\n    const newMessage: ChatMessage = {\n      id: generateId(),\n      content,\n      sender,\n      timestamp: new Date(),\n    };\n\n    setChatState(prev => ({\n      ...prev,\n      messages: [...prev.messages, newMessage],\n    }));\n  }, []);\n\n  const clearMessages = useCallback(() => {\n    setChatState(prev => ({\n      ...prev,\n      messages: [],\n    }));\n  }, []);\n\n  const toggleVisibility = useCallback(() => {\n    setChatState(prev => ({\n      ...prev,\n      isVisible: !prev.isVisible,\n    }));\n  }, []);\n\n  const toggleMinimize = useCallback(() => {\n    setChatState(prev => ({\n      ...prev,\n      isMinimized: !prev.isMinimized,\n    }));\n  }, []);\n\n  const updatePosition = useCallback((position: { x: number; y: number }) => {\n    setChatState(prev => ({\n      ...prev,\n      position,\n    }));\n  }, []);\n\n  const sendMessage = useCallback((message: string) => {\n    addMessage(message, 'user');\n    // TODO: Add AI response logic here when Gemini integration is implemented\n    // For now, we'll just echo the message back\n    setTimeout(() => {\n      addMessage(`Echo: ${message}`, 'ai');\n    }, 1000);\n  }, [addMessage]);\n\n  return {\n    chatState,\n    addMessage,\n    clearMessages,\n    toggleVisibility,\n    toggleMinimize,\n    updatePosition,\n    sendMessage,\n  };\n};\n"],"mappings":"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","names":["import_react","import_theme_ui","import_theme_ui","import_jsx_runtime","import_jsx_runtime","import_theme_ui","import_jsx_runtime","import_react"]}